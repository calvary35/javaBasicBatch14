Collection Framework:
    It's a collection of classes and interfaces that help us store and manipulate the data efficiently.

Why we should use Collections Framework?
    1. It's flexible (we don't need to provide size beforehand).
    2. It's dynamic (all the classes can increase and decrease their size at run time).
    3. There are built-in methods to perform common tasks.
    4. Pre-built data structures.

Downsides of Collections Framework:
    1. We cannot use primitive data types- we have to use wrapper classes which occupy 4 times more memory than
       a primitive.
    Example: int num=10; // 4 memory locations
             Integer num1=10; //16 memory locations

    2. It is slower due to memory size(data size)

Wrapper Class:
    Wrapper classes are object types for all the primitive types

Why should we learn about the wrapper types?
    1. Because collections framework only supports wrapper types
    2. There are built-in methods to perform common tasks.

Downsides:
    1. We cannot use primitive data types- we have to use wrapper classes which occupy 4 times more memory than
       a primitive.
    Example: int num=10; // 4 memory locations
             Integer num1=10; //16 memory locations

Boxing:
    Converting a primitive to its corresponding wrapper type by manually calling methods
    int pnum=10;
    Integer wnum= new Integer(pnum);

AutoBoxing:
    Conversion from primitive to a wrapper type but here we don't need to call any methods explicitly
     int pnum=10;
        Integer wnum= pnum;

Unboxing:
    Converting a wrapper to a primitive by calling a method.
    Integer wnum = new Integer(10);
    int pnum = wnum.intValue;

AutoUnboxing:
    Converting a wrapper to a primitive without calling method any methods.
      Integer wnum = new Integer(10);
      int pnum = wnum;

ArrayList Class:
    It is a class in collections framework that allows us to store data like an Array.
    Some common methods from this class are 1) add(), 2) remove(),3) contains, 4) size().

Iterator:
    It's a mechanism that allows us to iterate and delete data from any class in collections framework.
    It has hasNext(),next(), remove()

Why we should learn about Iterator?
    Because loops are not safe when we perform an operation that can change the size of a data structure.

ArrayList Vs LinkedList
    Both of the classes implement the list interface which means both of them will have same methods.

    ArrayList:
        Uses an array behind the scenes to store the data.
        We should use arrayList when we are retrieving the data most of the time
        and not inserting the data in the start or in between if we have to shift the data to the list.

    LinkedList:
        LinkedList does not store the data in consecutive memory- that's why it is easier to insert and remove the data
        from anywhere in a list.
        If we are going to manipulate the data(shifting of elements) always use LinkedList

If most of the time you use add or remove method then use LinkedList

If most of the time you use get method then use ArrayList

Sets
